import networkx as nx


class Peer:
    # static array to keep track of the peers
    # peers[peerID] should give you the Peer object
    peers = []
    initial_balances = []

    def __init__(self, ID, genesis):
        self.ID = ID
        self.isSlow = False
        self.isLowCPU = False
        self.hashingPower = 0

        # mempool is the list of transactionsID
        # received or generated by the peer
        self.mempool = []

        # blocklist is the list of blockID
        # received or generated by the peer
        self.blockList = []

        # ledger is the blockchain tree maintained by the peer
        self.ledger = nx.DiGraph()
        self.ledger.add_node(genesis.BlkId)

        # everyones_balance is a dictionary
        # maintained by every peer
        # input = ID of the peer
        # output = balance of that peer
        self.everyones_balance = []

        # dict for arrival time for each block
        self.arrival_times = {}
        self.arrival_times[0] = 0

        Peer.peers.append(self)

    def __str__(self):
        return f'P{self.ID}: {"slow" if self.isSlow else "fast"} {"low_cpu" if self.isLowCPU else "high_cpu"}'
